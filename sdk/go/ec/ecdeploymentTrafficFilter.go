// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ECDeploymentTrafficFilter struct {
	pulumi.CustomResourceState

	// Optional ruleset description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault pulumi.BoolPtrOutput `pulumi:"includeByDefault"`
	// Required name of the ruleset
	Name pulumi.StringOutput `pulumi:"name"`
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region pulumi.StringOutput `pulumi:"region"`
	// Required list of rules, which the ruleset is made of.
	Rules ECDeploymentTrafficFilterRuleArrayOutput `pulumi:"rules"`
	// Required type of the ruleset ("ip" or "vpce")
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewECDeploymentTrafficFilter registers a new resource with the given unique name, arguments, and options.
func NewECDeploymentTrafficFilter(ctx *pulumi.Context,
	name string, args *ECDeploymentTrafficFilterArgs, opts ...pulumi.ResourceOption) (*ECDeploymentTrafficFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ECDeploymentTrafficFilter
	err := ctx.RegisterResource("ec:index/eCDeploymentTrafficFilter:ECDeploymentTrafficFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECDeploymentTrafficFilter gets an existing ECDeploymentTrafficFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECDeploymentTrafficFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECDeploymentTrafficFilterState, opts ...pulumi.ResourceOption) (*ECDeploymentTrafficFilter, error) {
	var resource ECDeploymentTrafficFilter
	err := ctx.ReadResource("ec:index/eCDeploymentTrafficFilter:ECDeploymentTrafficFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECDeploymentTrafficFilter resources.
type ecdeploymentTrafficFilterState struct {
	// Optional ruleset description
	Description *string `pulumi:"description"`
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault *bool `pulumi:"includeByDefault"`
	// Required name of the ruleset
	Name *string `pulumi:"name"`
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region *string `pulumi:"region"`
	// Required list of rules, which the ruleset is made of.
	Rules []ECDeploymentTrafficFilterRule `pulumi:"rules"`
	// Required type of the ruleset ("ip" or "vpce")
	Type *string `pulumi:"type"`
}

type ECDeploymentTrafficFilterState struct {
	// Optional ruleset description
	Description pulumi.StringPtrInput
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault pulumi.BoolPtrInput
	// Required name of the ruleset
	Name pulumi.StringPtrInput
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region pulumi.StringPtrInput
	// Required list of rules, which the ruleset is made of.
	Rules ECDeploymentTrafficFilterRuleArrayInput
	// Required type of the ruleset ("ip" or "vpce")
	Type pulumi.StringPtrInput
}

func (ECDeploymentTrafficFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdeploymentTrafficFilterState)(nil)).Elem()
}

type ecdeploymentTrafficFilterArgs struct {
	// Optional ruleset description
	Description *string `pulumi:"description"`
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault *bool `pulumi:"includeByDefault"`
	// Required name of the ruleset
	Name *string `pulumi:"name"`
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region string `pulumi:"region"`
	// Required list of rules, which the ruleset is made of.
	Rules []ECDeploymentTrafficFilterRule `pulumi:"rules"`
	// Required type of the ruleset ("ip" or "vpce")
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ECDeploymentTrafficFilter resource.
type ECDeploymentTrafficFilterArgs struct {
	// Optional ruleset description
	Description pulumi.StringPtrInput
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault pulumi.BoolPtrInput
	// Required name of the ruleset
	Name pulumi.StringPtrInput
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region pulumi.StringInput
	// Required list of rules, which the ruleset is made of.
	Rules ECDeploymentTrafficFilterRuleArrayInput
	// Required type of the ruleset ("ip" or "vpce")
	Type pulumi.StringInput
}

func (ECDeploymentTrafficFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdeploymentTrafficFilterArgs)(nil)).Elem()
}

type ECDeploymentTrafficFilterInput interface {
	pulumi.Input

	ToECDeploymentTrafficFilterOutput() ECDeploymentTrafficFilterOutput
	ToECDeploymentTrafficFilterOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterOutput
}

func (*ECDeploymentTrafficFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*ECDeploymentTrafficFilter)(nil))
}

func (i *ECDeploymentTrafficFilter) ToECDeploymentTrafficFilterOutput() ECDeploymentTrafficFilterOutput {
	return i.ToECDeploymentTrafficFilterOutputWithContext(context.Background())
}

func (i *ECDeploymentTrafficFilter) ToECDeploymentTrafficFilterOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentTrafficFilterOutput)
}

func (i *ECDeploymentTrafficFilter) ToECDeploymentTrafficFilterPtrOutput() ECDeploymentTrafficFilterPtrOutput {
	return i.ToECDeploymentTrafficFilterPtrOutputWithContext(context.Background())
}

func (i *ECDeploymentTrafficFilter) ToECDeploymentTrafficFilterPtrOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentTrafficFilterPtrOutput)
}

type ECDeploymentTrafficFilterPtrInput interface {
	pulumi.Input

	ToECDeploymentTrafficFilterPtrOutput() ECDeploymentTrafficFilterPtrOutput
	ToECDeploymentTrafficFilterPtrOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterPtrOutput
}

type ecdeploymentTrafficFilterPtrType ECDeploymentTrafficFilterArgs

func (*ecdeploymentTrafficFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECDeploymentTrafficFilter)(nil))
}

func (i *ecdeploymentTrafficFilterPtrType) ToECDeploymentTrafficFilterPtrOutput() ECDeploymentTrafficFilterPtrOutput {
	return i.ToECDeploymentTrafficFilterPtrOutputWithContext(context.Background())
}

func (i *ecdeploymentTrafficFilterPtrType) ToECDeploymentTrafficFilterPtrOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentTrafficFilterPtrOutput)
}

// ECDeploymentTrafficFilterArrayInput is an input type that accepts ECDeploymentTrafficFilterArray and ECDeploymentTrafficFilterArrayOutput values.
// You can construct a concrete instance of `ECDeploymentTrafficFilterArrayInput` via:
//
//          ECDeploymentTrafficFilterArray{ ECDeploymentTrafficFilterArgs{...} }
type ECDeploymentTrafficFilterArrayInput interface {
	pulumi.Input

	ToECDeploymentTrafficFilterArrayOutput() ECDeploymentTrafficFilterArrayOutput
	ToECDeploymentTrafficFilterArrayOutputWithContext(context.Context) ECDeploymentTrafficFilterArrayOutput
}

type ECDeploymentTrafficFilterArray []ECDeploymentTrafficFilterInput

func (ECDeploymentTrafficFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ECDeploymentTrafficFilter)(nil))
}

func (i ECDeploymentTrafficFilterArray) ToECDeploymentTrafficFilterArrayOutput() ECDeploymentTrafficFilterArrayOutput {
	return i.ToECDeploymentTrafficFilterArrayOutputWithContext(context.Background())
}

func (i ECDeploymentTrafficFilterArray) ToECDeploymentTrafficFilterArrayOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentTrafficFilterArrayOutput)
}

// ECDeploymentTrafficFilterMapInput is an input type that accepts ECDeploymentTrafficFilterMap and ECDeploymentTrafficFilterMapOutput values.
// You can construct a concrete instance of `ECDeploymentTrafficFilterMapInput` via:
//
//          ECDeploymentTrafficFilterMap{ "key": ECDeploymentTrafficFilterArgs{...} }
type ECDeploymentTrafficFilterMapInput interface {
	pulumi.Input

	ToECDeploymentTrafficFilterMapOutput() ECDeploymentTrafficFilterMapOutput
	ToECDeploymentTrafficFilterMapOutputWithContext(context.Context) ECDeploymentTrafficFilterMapOutput
}

type ECDeploymentTrafficFilterMap map[string]ECDeploymentTrafficFilterInput

func (ECDeploymentTrafficFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ECDeploymentTrafficFilter)(nil))
}

func (i ECDeploymentTrafficFilterMap) ToECDeploymentTrafficFilterMapOutput() ECDeploymentTrafficFilterMapOutput {
	return i.ToECDeploymentTrafficFilterMapOutputWithContext(context.Background())
}

func (i ECDeploymentTrafficFilterMap) ToECDeploymentTrafficFilterMapOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentTrafficFilterMapOutput)
}

type ECDeploymentTrafficFilterOutput struct {
	*pulumi.OutputState
}

func (ECDeploymentTrafficFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECDeploymentTrafficFilter)(nil))
}

func (o ECDeploymentTrafficFilterOutput) ToECDeploymentTrafficFilterOutput() ECDeploymentTrafficFilterOutput {
	return o
}

func (o ECDeploymentTrafficFilterOutput) ToECDeploymentTrafficFilterOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterOutput {
	return o
}

func (o ECDeploymentTrafficFilterOutput) ToECDeploymentTrafficFilterPtrOutput() ECDeploymentTrafficFilterPtrOutput {
	return o.ToECDeploymentTrafficFilterPtrOutputWithContext(context.Background())
}

func (o ECDeploymentTrafficFilterOutput) ToECDeploymentTrafficFilterPtrOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterPtrOutput {
	return o.ApplyT(func(v ECDeploymentTrafficFilter) *ECDeploymentTrafficFilter {
		return &v
	}).(ECDeploymentTrafficFilterPtrOutput)
}

type ECDeploymentTrafficFilterPtrOutput struct {
	*pulumi.OutputState
}

func (ECDeploymentTrafficFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECDeploymentTrafficFilter)(nil))
}

func (o ECDeploymentTrafficFilterPtrOutput) ToECDeploymentTrafficFilterPtrOutput() ECDeploymentTrafficFilterPtrOutput {
	return o
}

func (o ECDeploymentTrafficFilterPtrOutput) ToECDeploymentTrafficFilterPtrOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterPtrOutput {
	return o
}

type ECDeploymentTrafficFilterArrayOutput struct{ *pulumi.OutputState }

func (ECDeploymentTrafficFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECDeploymentTrafficFilter)(nil))
}

func (o ECDeploymentTrafficFilterArrayOutput) ToECDeploymentTrafficFilterArrayOutput() ECDeploymentTrafficFilterArrayOutput {
	return o
}

func (o ECDeploymentTrafficFilterArrayOutput) ToECDeploymentTrafficFilterArrayOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterArrayOutput {
	return o
}

func (o ECDeploymentTrafficFilterArrayOutput) Index(i pulumi.IntInput) ECDeploymentTrafficFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECDeploymentTrafficFilter {
		return vs[0].([]ECDeploymentTrafficFilter)[vs[1].(int)]
	}).(ECDeploymentTrafficFilterOutput)
}

type ECDeploymentTrafficFilterMapOutput struct{ *pulumi.OutputState }

func (ECDeploymentTrafficFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ECDeploymentTrafficFilter)(nil))
}

func (o ECDeploymentTrafficFilterMapOutput) ToECDeploymentTrafficFilterMapOutput() ECDeploymentTrafficFilterMapOutput {
	return o
}

func (o ECDeploymentTrafficFilterMapOutput) ToECDeploymentTrafficFilterMapOutputWithContext(ctx context.Context) ECDeploymentTrafficFilterMapOutput {
	return o
}

func (o ECDeploymentTrafficFilterMapOutput) MapIndex(k pulumi.StringInput) ECDeploymentTrafficFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ECDeploymentTrafficFilter {
		return vs[0].(map[string]ECDeploymentTrafficFilter)[vs[1].(string)]
	}).(ECDeploymentTrafficFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(ECDeploymentTrafficFilterOutput{})
	pulumi.RegisterOutputType(ECDeploymentTrafficFilterPtrOutput{})
	pulumi.RegisterOutputType(ECDeploymentTrafficFilterArrayOutput{})
	pulumi.RegisterOutputType(ECDeploymentTrafficFilterMapOutput{})
}
