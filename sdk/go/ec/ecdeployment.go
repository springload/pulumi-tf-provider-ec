// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ECDeployment struct {
	pulumi.CustomResourceState

	// Optional APM resource definition
	Apm            ECDeploymentApmPtrOutput `pulumi:"apm"`
	ApmSecretToken pulumi.StringOutput      `pulumi:"apmSecretToken"`
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateId pulumi.StringOutput `pulumi:"deploymentTemplateId"`
	// Required Elasticsearch resource definition
	Elasticsearch ECDeploymentElasticsearchOutput `pulumi:"elasticsearch"`
	// Computed password obtained upon creating the Elasticsearch resource
	ElasticsearchPassword pulumi.StringOutput `pulumi:"elasticsearchPassword"`
	// Computed username obtained upon creating the Elasticsearch resource
	ElasticsearchUsername pulumi.StringOutput `pulumi:"elasticsearchUsername"`
	// Optional Enterprise Search resource definition
	EnterpriseSearch ECDeploymentEnterpriseSearchPtrOutput `pulumi:"enterpriseSearch"`
	// Optional Kibana resource definition
	Kibana ECDeploymentKibanaPtrOutput `pulumi:"kibana"`
	// Optional name for the deployment
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability ECDeploymentObservabilityPtrOutput `pulumi:"observability"`
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region pulumi.StringOutput `pulumi:"region"`
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
	// request_id is returned as part of the error
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Optional map of deployment tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Optional list of traffic filters to apply to this deployment.
	TrafficFilters pulumi.StringArrayOutput `pulumi:"trafficFilters"`
	// Required Elastic Stack version to use for all of the deployment resources
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewECDeployment registers a new resource with the given unique name, arguments, and options.
func NewECDeployment(ctx *pulumi.Context,
	name string, args *ECDeploymentArgs, opts ...pulumi.ResourceOption) (*ECDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentTemplateId'")
	}
	if args.Elasticsearch == nil {
		return nil, errors.New("invalid value for required argument 'Elasticsearch'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource ECDeployment
	err := ctx.RegisterResource("ec:index/eCDeployment:ECDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetECDeployment gets an existing ECDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetECDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ECDeploymentState, opts ...pulumi.ResourceOption) (*ECDeployment, error) {
	var resource ECDeployment
	err := ctx.ReadResource("ec:index/eCDeployment:ECDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ECDeployment resources.
type ecdeploymentState struct {
	// Optional APM resource definition
	Apm            *ECDeploymentApm `pulumi:"apm"`
	ApmSecretToken *string          `pulumi:"apmSecretToken"`
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateId *string `pulumi:"deploymentTemplateId"`
	// Required Elasticsearch resource definition
	Elasticsearch *ECDeploymentElasticsearch `pulumi:"elasticsearch"`
	// Computed password obtained upon creating the Elasticsearch resource
	ElasticsearchPassword *string `pulumi:"elasticsearchPassword"`
	// Computed username obtained upon creating the Elasticsearch resource
	ElasticsearchUsername *string `pulumi:"elasticsearchUsername"`
	// Optional Enterprise Search resource definition
	EnterpriseSearch *ECDeploymentEnterpriseSearch `pulumi:"enterpriseSearch"`
	// Optional Kibana resource definition
	Kibana *ECDeploymentKibana `pulumi:"kibana"`
	// Optional name for the deployment
	Name *string `pulumi:"name"`
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability *ECDeploymentObservability `pulumi:"observability"`
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region *string `pulumi:"region"`
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
	// request_id is returned as part of the error
	RequestId *string `pulumi:"requestId"`
	// Optional map of deployment tags
	Tags map[string]string `pulumi:"tags"`
	// Optional list of traffic filters to apply to this deployment.
	TrafficFilters []string `pulumi:"trafficFilters"`
	// Required Elastic Stack version to use for all of the deployment resources
	Version *string `pulumi:"version"`
}

type ECDeploymentState struct {
	// Optional APM resource definition
	Apm            ECDeploymentApmPtrInput
	ApmSecretToken pulumi.StringPtrInput
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateId pulumi.StringPtrInput
	// Required Elasticsearch resource definition
	Elasticsearch ECDeploymentElasticsearchPtrInput
	// Computed password obtained upon creating the Elasticsearch resource
	ElasticsearchPassword pulumi.StringPtrInput
	// Computed username obtained upon creating the Elasticsearch resource
	ElasticsearchUsername pulumi.StringPtrInput
	// Optional Enterprise Search resource definition
	EnterpriseSearch ECDeploymentEnterpriseSearchPtrInput
	// Optional Kibana resource definition
	Kibana ECDeploymentKibanaPtrInput
	// Optional name for the deployment
	Name pulumi.StringPtrInput
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability ECDeploymentObservabilityPtrInput
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region pulumi.StringPtrInput
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
	// request_id is returned as part of the error
	RequestId pulumi.StringPtrInput
	// Optional map of deployment tags
	Tags pulumi.StringMapInput
	// Optional list of traffic filters to apply to this deployment.
	TrafficFilters pulumi.StringArrayInput
	// Required Elastic Stack version to use for all of the deployment resources
	Version pulumi.StringPtrInput
}

func (ECDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdeploymentState)(nil)).Elem()
}

type ecdeploymentArgs struct {
	// Optional APM resource definition
	Apm *ECDeploymentApm `pulumi:"apm"`
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateId string `pulumi:"deploymentTemplateId"`
	// Required Elasticsearch resource definition
	Elasticsearch ECDeploymentElasticsearch `pulumi:"elasticsearch"`
	// Optional Enterprise Search resource definition
	EnterpriseSearch *ECDeploymentEnterpriseSearch `pulumi:"enterpriseSearch"`
	// Optional Kibana resource definition
	Kibana *ECDeploymentKibana `pulumi:"kibana"`
	// Optional name for the deployment
	Name *string `pulumi:"name"`
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability *ECDeploymentObservability `pulumi:"observability"`
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region string `pulumi:"region"`
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
	// request_id is returned as part of the error
	RequestId *string `pulumi:"requestId"`
	// Optional map of deployment tags
	Tags map[string]string `pulumi:"tags"`
	// Optional list of traffic filters to apply to this deployment.
	TrafficFilters []string `pulumi:"trafficFilters"`
	// Required Elastic Stack version to use for all of the deployment resources
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a ECDeployment resource.
type ECDeploymentArgs struct {
	// Optional APM resource definition
	Apm ECDeploymentApmPtrInput
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateId pulumi.StringInput
	// Required Elasticsearch resource definition
	Elasticsearch ECDeploymentElasticsearchInput
	// Optional Enterprise Search resource definition
	EnterpriseSearch ECDeploymentEnterpriseSearchPtrInput
	// Optional Kibana resource definition
	Kibana ECDeploymentKibanaPtrInput
	// Optional name for the deployment
	Name pulumi.StringPtrInput
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability ECDeploymentObservabilityPtrInput
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region pulumi.StringInput
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
	// request_id is returned as part of the error
	RequestId pulumi.StringPtrInput
	// Optional map of deployment tags
	Tags pulumi.StringMapInput
	// Optional list of traffic filters to apply to this deployment.
	TrafficFilters pulumi.StringArrayInput
	// Required Elastic Stack version to use for all of the deployment resources
	Version pulumi.StringInput
}

func (ECDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ecdeploymentArgs)(nil)).Elem()
}

type ECDeploymentInput interface {
	pulumi.Input

	ToECDeploymentOutput() ECDeploymentOutput
	ToECDeploymentOutputWithContext(ctx context.Context) ECDeploymentOutput
}

func (*ECDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((*ECDeployment)(nil))
}

func (i *ECDeployment) ToECDeploymentOutput() ECDeploymentOutput {
	return i.ToECDeploymentOutputWithContext(context.Background())
}

func (i *ECDeployment) ToECDeploymentOutputWithContext(ctx context.Context) ECDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentOutput)
}

func (i *ECDeployment) ToECDeploymentPtrOutput() ECDeploymentPtrOutput {
	return i.ToECDeploymentPtrOutputWithContext(context.Background())
}

func (i *ECDeployment) ToECDeploymentPtrOutputWithContext(ctx context.Context) ECDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentPtrOutput)
}

type ECDeploymentPtrInput interface {
	pulumi.Input

	ToECDeploymentPtrOutput() ECDeploymentPtrOutput
	ToECDeploymentPtrOutputWithContext(ctx context.Context) ECDeploymentPtrOutput
}

type ecdeploymentPtrType ECDeploymentArgs

func (*ecdeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECDeployment)(nil))
}

func (i *ecdeploymentPtrType) ToECDeploymentPtrOutput() ECDeploymentPtrOutput {
	return i.ToECDeploymentPtrOutputWithContext(context.Background())
}

func (i *ecdeploymentPtrType) ToECDeploymentPtrOutputWithContext(ctx context.Context) ECDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentPtrOutput)
}

// ECDeploymentArrayInput is an input type that accepts ECDeploymentArray and ECDeploymentArrayOutput values.
// You can construct a concrete instance of `ECDeploymentArrayInput` via:
//
//          ECDeploymentArray{ ECDeploymentArgs{...} }
type ECDeploymentArrayInput interface {
	pulumi.Input

	ToECDeploymentArrayOutput() ECDeploymentArrayOutput
	ToECDeploymentArrayOutputWithContext(context.Context) ECDeploymentArrayOutput
}

type ECDeploymentArray []ECDeploymentInput

func (ECDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ECDeployment)(nil))
}

func (i ECDeploymentArray) ToECDeploymentArrayOutput() ECDeploymentArrayOutput {
	return i.ToECDeploymentArrayOutputWithContext(context.Background())
}

func (i ECDeploymentArray) ToECDeploymentArrayOutputWithContext(ctx context.Context) ECDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentArrayOutput)
}

// ECDeploymentMapInput is an input type that accepts ECDeploymentMap and ECDeploymentMapOutput values.
// You can construct a concrete instance of `ECDeploymentMapInput` via:
//
//          ECDeploymentMap{ "key": ECDeploymentArgs{...} }
type ECDeploymentMapInput interface {
	pulumi.Input

	ToECDeploymentMapOutput() ECDeploymentMapOutput
	ToECDeploymentMapOutputWithContext(context.Context) ECDeploymentMapOutput
}

type ECDeploymentMap map[string]ECDeploymentInput

func (ECDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ECDeployment)(nil))
}

func (i ECDeploymentMap) ToECDeploymentMapOutput() ECDeploymentMapOutput {
	return i.ToECDeploymentMapOutputWithContext(context.Background())
}

func (i ECDeploymentMap) ToECDeploymentMapOutputWithContext(ctx context.Context) ECDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECDeploymentMapOutput)
}

type ECDeploymentOutput struct {
	*pulumi.OutputState
}

func (ECDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECDeployment)(nil))
}

func (o ECDeploymentOutput) ToECDeploymentOutput() ECDeploymentOutput {
	return o
}

func (o ECDeploymentOutput) ToECDeploymentOutputWithContext(ctx context.Context) ECDeploymentOutput {
	return o
}

func (o ECDeploymentOutput) ToECDeploymentPtrOutput() ECDeploymentPtrOutput {
	return o.ToECDeploymentPtrOutputWithContext(context.Background())
}

func (o ECDeploymentOutput) ToECDeploymentPtrOutputWithContext(ctx context.Context) ECDeploymentPtrOutput {
	return o.ApplyT(func(v ECDeployment) *ECDeployment {
		return &v
	}).(ECDeploymentPtrOutput)
}

type ECDeploymentPtrOutput struct {
	*pulumi.OutputState
}

func (ECDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECDeployment)(nil))
}

func (o ECDeploymentPtrOutput) ToECDeploymentPtrOutput() ECDeploymentPtrOutput {
	return o
}

func (o ECDeploymentPtrOutput) ToECDeploymentPtrOutputWithContext(ctx context.Context) ECDeploymentPtrOutput {
	return o
}

type ECDeploymentArrayOutput struct{ *pulumi.OutputState }

func (ECDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ECDeployment)(nil))
}

func (o ECDeploymentArrayOutput) ToECDeploymentArrayOutput() ECDeploymentArrayOutput {
	return o
}

func (o ECDeploymentArrayOutput) ToECDeploymentArrayOutputWithContext(ctx context.Context) ECDeploymentArrayOutput {
	return o
}

func (o ECDeploymentArrayOutput) Index(i pulumi.IntInput) ECDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ECDeployment {
		return vs[0].([]ECDeployment)[vs[1].(int)]
	}).(ECDeploymentOutput)
}

type ECDeploymentMapOutput struct{ *pulumi.OutputState }

func (ECDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ECDeployment)(nil))
}

func (o ECDeploymentMapOutput) ToECDeploymentMapOutput() ECDeploymentMapOutput {
	return o
}

func (o ECDeploymentMapOutput) ToECDeploymentMapOutputWithContext(ctx context.Context) ECDeploymentMapOutput {
	return o
}

func (o ECDeploymentMapOutput) MapIndex(k pulumi.StringInput) ECDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ECDeployment {
		return vs[0].(map[string]ECDeployment)[vs[1].(string)]
	}).(ECDeploymentOutput)
}

func init() {
	pulumi.RegisterOutputType(ECDeploymentOutput{})
	pulumi.RegisterOutputType(ECDeploymentPtrOutput{})
	pulumi.RegisterOutputType(ECDeploymentArrayOutput{})
	pulumi.RegisterOutputType(ECDeploymentMapOutput{})
}
