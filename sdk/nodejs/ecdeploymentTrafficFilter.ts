// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ECDeploymentTrafficFilter extends pulumi.CustomResource {
    /**
     * Get an existing ECDeploymentTrafficFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ECDeploymentTrafficFilterState, opts?: pulumi.CustomResourceOptions): ECDeploymentTrafficFilter {
        return new ECDeploymentTrafficFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ec:index/eCDeploymentTrafficFilter:ECDeploymentTrafficFilter';

    /**
     * Returns true if the given object is an instance of ECDeploymentTrafficFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ECDeploymentTrafficFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ECDeploymentTrafficFilter.__pulumiType;
    }

    /**
     * Optional ruleset description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Should the ruleset be automatically included in the new deployments (Defaults to false)
     */
    public readonly includeByDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Required name of the ruleset
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Required filter region, the ruleset can only be attached to deployments in the specific region
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Required list of rules, which the ruleset is made of.
     */
    public readonly rules!: pulumi.Output<outputs.ECDeploymentTrafficFilterRule[]>;
    /**
     * Required type of the ruleset ("ip" or "vpce")
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ECDeploymentTrafficFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ECDeploymentTrafficFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ECDeploymentTrafficFilterArgs | ECDeploymentTrafficFilterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ECDeploymentTrafficFilterState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["includeByDefault"] = state ? state.includeByDefault : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["rules"] = state ? state.rules : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ECDeploymentTrafficFilterArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["includeByDefault"] = args ? args.includeByDefault : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["rules"] = args ? args.rules : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ECDeploymentTrafficFilter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ECDeploymentTrafficFilter resources.
 */
export interface ECDeploymentTrafficFilterState {
    /**
     * Optional ruleset description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Should the ruleset be automatically included in the new deployments (Defaults to false)
     */
    readonly includeByDefault?: pulumi.Input<boolean>;
    /**
     * Required name of the ruleset
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required filter region, the ruleset can only be attached to deployments in the specific region
     */
    readonly region?: pulumi.Input<string>;
    /**
     * Required list of rules, which the ruleset is made of.
     */
    readonly rules?: pulumi.Input<pulumi.Input<inputs.ECDeploymentTrafficFilterRule>[]>;
    /**
     * Required type of the ruleset ("ip" or "vpce")
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ECDeploymentTrafficFilter resource.
 */
export interface ECDeploymentTrafficFilterArgs {
    /**
     * Optional ruleset description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Should the ruleset be automatically included in the new deployments (Defaults to false)
     */
    readonly includeByDefault?: pulumi.Input<boolean>;
    /**
     * Required name of the ruleset
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Required filter region, the ruleset can only be attached to deployments in the specific region
     */
    readonly region: pulumi.Input<string>;
    /**
     * Required list of rules, which the ruleset is made of.
     */
    readonly rules: pulumi.Input<pulumi.Input<inputs.ECDeploymentTrafficFilterRule>[]>;
    /**
     * Required type of the ruleset ("ip" or "vpce")
     */
    readonly type: pulumi.Input<string>;
}
