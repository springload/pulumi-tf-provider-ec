// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ECDeploymentApm {
    config?: pulumi.Input<inputs.ECDeploymentApmConfig>;
    elasticsearchClusterRefId?: pulumi.Input<string>;
    httpEndpoint?: pulumi.Input<string>;
    httpsEndpoint?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    topologies?: pulumi.Input<pulumi.Input<inputs.ECDeploymentApmTopology>[]>;
}

export interface ECDeploymentApmConfig {
    debugEnabled?: pulumi.Input<boolean>;
    userSettingsJson?: pulumi.Input<string>;
    userSettingsOverrideJson?: pulumi.Input<string>;
    userSettingsOverrideYaml?: pulumi.Input<string>;
    userSettingsYaml?: pulumi.Input<string>;
}

export interface ECDeploymentApmTopology {
    instanceConfigurationId?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sizeResource?: pulumi.Input<string>;
    zoneCount?: pulumi.Input<number>;
}

export interface ECDeploymentElasticsearch {
    cloudId?: pulumi.Input<string>;
    config?: pulumi.Input<inputs.ECDeploymentElasticsearchConfig>;
    extensions?: pulumi.Input<pulumi.Input<inputs.ECDeploymentElasticsearchExtension>[]>;
    httpEndpoint?: pulumi.Input<string>;
    httpsEndpoint?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteClusters?: pulumi.Input<pulumi.Input<inputs.ECDeploymentElasticsearchRemoteCluster>[]>;
    resourceId?: pulumi.Input<string>;
    snapshotSource?: pulumi.Input<inputs.ECDeploymentElasticsearchSnapshotSource>;
    topologies?: pulumi.Input<pulumi.Input<inputs.ECDeploymentElasticsearchTopology>[]>;
}

export interface ECDeploymentElasticsearchConfig {
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
    userSettingsJson?: pulumi.Input<string>;
    userSettingsOverrideJson?: pulumi.Input<string>;
    userSettingsOverrideYaml?: pulumi.Input<string>;
    userSettingsYaml?: pulumi.Input<string>;
}

export interface ECDeploymentElasticsearchExtension {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    url: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface ECDeploymentElasticsearchRemoteCluster {
    alias?: pulumi.Input<string>;
    deploymentId: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    skipUnavailable?: pulumi.Input<boolean>;
}

export interface ECDeploymentElasticsearchSnapshotSource {
    snapshotName?: pulumi.Input<string>;
    sourceElasticsearchClusterId: pulumi.Input<string>;
}

export interface ECDeploymentElasticsearchTopology {
    id: pulumi.Input<string>;
    instanceConfigurationId?: pulumi.Input<string>;
    nodeRoles?: pulumi.Input<pulumi.Input<string>[]>;
    nodeTypeData?: pulumi.Input<string>;
    nodeTypeIngest?: pulumi.Input<string>;
    nodeTypeMaster?: pulumi.Input<string>;
    nodeTypeMl?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sizeResource?: pulumi.Input<string>;
    zoneCount?: pulumi.Input<number>;
}

export interface ECDeploymentEnterpriseSearch {
    config?: pulumi.Input<inputs.ECDeploymentEnterpriseSearchConfig>;
    elasticsearchClusterRefId?: pulumi.Input<string>;
    httpEndpoint?: pulumi.Input<string>;
    httpsEndpoint?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    topologies?: pulumi.Input<pulumi.Input<inputs.ECDeploymentEnterpriseSearchTopology>[]>;
}

export interface ECDeploymentEnterpriseSearchConfig {
    userSettingsJson?: pulumi.Input<string>;
    userSettingsOverrideJson?: pulumi.Input<string>;
    userSettingsOverrideYaml?: pulumi.Input<string>;
    userSettingsYaml?: pulumi.Input<string>;
}

export interface ECDeploymentEnterpriseSearchTopology {
    instanceConfigurationId?: pulumi.Input<string>;
    nodeTypeAppserver?: pulumi.Input<boolean>;
    nodeTypeConnector?: pulumi.Input<boolean>;
    nodeTypeWorker?: pulumi.Input<boolean>;
    size?: pulumi.Input<string>;
    sizeResource?: pulumi.Input<string>;
    zoneCount?: pulumi.Input<number>;
}

export interface ECDeploymentKibana {
    config?: pulumi.Input<inputs.ECDeploymentKibanaConfig>;
    elasticsearchClusterRefId?: pulumi.Input<string>;
    httpEndpoint?: pulumi.Input<string>;
    httpsEndpoint?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    topologies?: pulumi.Input<pulumi.Input<inputs.ECDeploymentKibanaTopology>[]>;
}

export interface ECDeploymentKibanaConfig {
    userSettingsJson?: pulumi.Input<string>;
    userSettingsOverrideJson?: pulumi.Input<string>;
    userSettingsOverrideYaml?: pulumi.Input<string>;
    userSettingsYaml?: pulumi.Input<string>;
}

export interface ECDeploymentKibanaTopology {
    instanceConfigurationId?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sizeResource?: pulumi.Input<string>;
    zoneCount?: pulumi.Input<number>;
}

export interface ECDeploymentObservability {
    deploymentId: pulumi.Input<string>;
    logs?: pulumi.Input<boolean>;
    metrics?: pulumi.Input<boolean>;
    refId?: pulumi.Input<string>;
}

export interface ECDeploymentTrafficFilterRule {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    source: pulumi.Input<string>;
}

export interface GetECDeploymentsApm {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsElasticsearch {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsEnterpriseSearch {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsKibana {
    healthy?: string;
    status?: string;
    version?: string;
}

