// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ECDeploymentApm {
    config?: outputs.ECDeploymentApmConfig;
    elasticsearchClusterRefId?: string;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId?: string;
    region: string;
    resourceId: string;
    topologies: outputs.ECDeploymentApmTopology[];
}

export interface ECDeploymentApmConfig {
    debugEnabled?: boolean;
    userSettingsJson?: string;
    userSettingsOverrideJson?: string;
    userSettingsOverrideYaml?: string;
    userSettingsYaml?: string;
}

export interface ECDeploymentApmTopology {
    instanceConfigurationId: string;
    size: string;
    sizeResource?: string;
    zoneCount: number;
}

export interface ECDeploymentElasticsearch {
    cloudId: string;
    config?: outputs.ECDeploymentElasticsearchConfig;
    extensions?: outputs.ECDeploymentElasticsearchExtension[];
    httpEndpoint: string;
    httpsEndpoint: string;
    refId?: string;
    region: string;
    remoteClusters?: outputs.ECDeploymentElasticsearchRemoteCluster[];
    resourceId: string;
    snapshotSource?: outputs.ECDeploymentElasticsearchSnapshotSource;
    topologies: outputs.ECDeploymentElasticsearchTopology[];
}

export interface ECDeploymentElasticsearchConfig {
    plugins?: string[];
    userSettingsJson?: string;
    userSettingsOverrideJson?: string;
    userSettingsOverrideYaml?: string;
    userSettingsYaml?: string;
}

export interface ECDeploymentElasticsearchExtension {
    name: string;
    type: string;
    url: string;
    version: string;
}

export interface ECDeploymentElasticsearchRemoteCluster {
    alias?: string;
    deploymentId: string;
    refId?: string;
    skipUnavailable?: boolean;
}

export interface ECDeploymentElasticsearchSnapshotSource {
    snapshotName?: string;
    sourceElasticsearchClusterId: string;
}

export interface ECDeploymentElasticsearchTopology {
    id: string;
    instanceConfigurationId: string;
    nodeRoles: string[];
    nodeTypeData: string;
    nodeTypeIngest: string;
    nodeTypeMaster: string;
    nodeTypeMl: string;
    size: string;
    sizeResource?: string;
    zoneCount: number;
}

export interface ECDeploymentEnterpriseSearch {
    config?: outputs.ECDeploymentEnterpriseSearchConfig;
    elasticsearchClusterRefId?: string;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId?: string;
    region: string;
    resourceId: string;
    topologies: outputs.ECDeploymentEnterpriseSearchTopology[];
}

export interface ECDeploymentEnterpriseSearchConfig {
    userSettingsJson?: string;
    userSettingsOverrideJson?: string;
    userSettingsOverrideYaml?: string;
    userSettingsYaml?: string;
}

export interface ECDeploymentEnterpriseSearchTopology {
    instanceConfigurationId: string;
    nodeTypeAppserver: boolean;
    nodeTypeConnector: boolean;
    nodeTypeWorker: boolean;
    size: string;
    sizeResource?: string;
    zoneCount: number;
}

export interface ECDeploymentKibana {
    config?: outputs.ECDeploymentKibanaConfig;
    elasticsearchClusterRefId?: string;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId?: string;
    region: string;
    resourceId: string;
    topologies: outputs.ECDeploymentKibanaTopology[];
}

export interface ECDeploymentKibanaConfig {
    userSettingsJson?: string;
    userSettingsOverrideJson?: string;
    userSettingsOverrideYaml?: string;
    userSettingsYaml?: string;
}

export interface ECDeploymentKibanaTopology {
    instanceConfigurationId: string;
    size: string;
    sizeResource?: string;
    zoneCount: number;
}

export interface ECDeploymentObservability {
    deploymentId: string;
    logs?: boolean;
    metrics?: boolean;
    refId: string;
}

export interface ECDeploymentTrafficFilterRule {
    description?: string;
    id: string;
    source: string;
}

export interface GetECDeploymentApm {
    elasticsearchClusterRefId: string;
    healthy: boolean;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId: string;
    resourceId: string;
    status: string;
    topologies: outputs.GetECDeploymentApmTopology[];
    version: string;
}

export interface GetECDeploymentApmTopology {
    instanceConfigurationId: string;
    size: string;
    sizeResource: string;
    zoneCount: number;
}

export interface GetECDeploymentElasticsearch {
    cloudId: string;
    healthy: boolean;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId: string;
    resourceId: string;
    status: string;
    topologies: outputs.GetECDeploymentElasticsearchTopology[];
    version: string;
}

export interface GetECDeploymentElasticsearchTopology {
    instanceConfigurationId: string;
    nodeRoles: string[];
    nodeTypeData: boolean;
    nodeTypeIngest: boolean;
    nodeTypeMaster: boolean;
    nodeTypeMl?: boolean;
    size: string;
    sizeResource: string;
    zoneCount: number;
}

export interface GetECDeploymentEnterpriseSearch {
    elasticsearchClusterRefId: string;
    healthy: boolean;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId: string;
    resourceId: string;
    status: string;
    topologies: outputs.GetECDeploymentEnterpriseSearchTopology[];
    version: string;
}

export interface GetECDeploymentEnterpriseSearchTopology {
    instanceConfigurationId: string;
    nodeTypeAppserver: boolean;
    nodeTypeConnector: boolean;
    nodeTypeWorker: boolean;
    size: string;
    sizeResource: string;
    zoneCount: number;
}

export interface GetECDeploymentKibana {
    elasticsearchClusterRefId: string;
    healthy: boolean;
    httpEndpoint: string;
    httpsEndpoint: string;
    refId: string;
    resourceId: string;
    status: string;
    topologies: outputs.GetECDeploymentKibanaTopology[];
    version: string;
}

export interface GetECDeploymentKibanaTopology {
    instanceConfigurationId: string;
    size: string;
    sizeResource: string;
    zoneCount: number;
}

export interface GetECDeploymentObservability {
    deploymentId: string;
    logs: boolean;
    metrics: boolean;
    refId: string;
}

export interface GetECDeploymentsApm {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsDeployment {
    apmResourceId: string;
    deploymentId: string;
    elasticsearchResourceId: string;
    enterpriseSearchResourceId: string;
    kibanaResourceId: string;
}

export interface GetECDeploymentsElasticsearch {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsEnterpriseSearch {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECDeploymentsKibana {
    healthy?: string;
    status?: string;
    version?: string;
}

export interface GetECStackApm {
    capacityConstraintsMax: number;
    capacityConstraintsMin: number;
    compatibleNodeTypes: string[];
    defaultPlugins: string[];
    denylists: string[];
    dockerImage: string;
    plugins: string[];
}

export interface GetECStackElasticsearch {
    capacityConstraintsMax: number;
    capacityConstraintsMin: number;
    compatibleNodeTypes: string[];
    defaultPlugins: string[];
    denylists: string[];
    dockerImage: string;
    plugins: string[];
}

export interface GetECStackEnterpriseSearch {
    capacityConstraintsMax: number;
    capacityConstraintsMin: number;
    compatibleNodeTypes: string[];
    defaultPlugins: string[];
    denylists: string[];
    dockerImage: string;
    plugins: string[];
}

export interface GetECStackKibana {
    capacityConstraintsMax: number;
    capacityConstraintsMin: number;
    compatibleNodeTypes: string[];
    defaultPlugins: string[];
    denylists: string[];
    dockerImage: string;
    plugins: string[];
}
