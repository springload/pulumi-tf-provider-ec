# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ECDeploymentTrafficFilterArgs', 'ECDeploymentTrafficFilter']

@pulumi.input_type
class ECDeploymentTrafficFilterArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 include_by_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ECDeploymentTrafficFilter resource.
        :param pulumi.Input[str] region: Required filter region, the ruleset can only be attached to deployments in the specific region
        :param pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]] rules: Required list of rules, which the ruleset is made of.
        :param pulumi.Input[str] type: Required type of the ruleset ("ip" or "vpce")
        :param pulumi.Input[str] description: Optional ruleset description
        :param pulumi.Input[bool] include_by_default: Should the ruleset be automatically included in the new deployments (Defaults to false)
        :param pulumi.Input[str] name: Required name of the ruleset
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if include_by_default is not None:
            pulumi.set(__self__, "include_by_default", include_by_default)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Required filter region, the ruleset can only be attached to deployments in the specific region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]]:
        """
        Required list of rules, which the ruleset is made of.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Required type of the ruleset ("ip" or "vpce")
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional ruleset description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="includeByDefault")
    def include_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the ruleset be automatically included in the new deployments (Defaults to false)
        """
        return pulumi.get(self, "include_by_default")

    @include_by_default.setter
    def include_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_by_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required name of the ruleset
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ECDeploymentTrafficFilterState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 include_by_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ECDeploymentTrafficFilter resources.
        :param pulumi.Input[str] description: Optional ruleset description
        :param pulumi.Input[bool] include_by_default: Should the ruleset be automatically included in the new deployments (Defaults to false)
        :param pulumi.Input[str] name: Required name of the ruleset
        :param pulumi.Input[str] region: Required filter region, the ruleset can only be attached to deployments in the specific region
        :param pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]] rules: Required list of rules, which the ruleset is made of.
        :param pulumi.Input[str] type: Required type of the ruleset ("ip" or "vpce")
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if include_by_default is not None:
            pulumi.set(__self__, "include_by_default", include_by_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional ruleset description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="includeByDefault")
    def include_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Should the ruleset be automatically included in the new deployments (Defaults to false)
        """
        return pulumi.get(self, "include_by_default")

    @include_by_default.setter
    def include_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_by_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required name of the ruleset
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Required filter region, the ruleset can only be attached to deployments in the specific region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]]]:
        """
        Required list of rules, which the ruleset is made of.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentTrafficFilterRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Required type of the ruleset ("ip" or "vpce")
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ECDeploymentTrafficFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_by_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ECDeploymentTrafficFilterRuleArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ECDeploymentTrafficFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional ruleset description
        :param pulumi.Input[bool] include_by_default: Should the ruleset be automatically included in the new deployments (Defaults to false)
        :param pulumi.Input[str] name: Required name of the ruleset
        :param pulumi.Input[str] region: Required filter region, the ruleset can only be attached to deployments in the specific region
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ECDeploymentTrafficFilterRuleArgs']]]] rules: Required list of rules, which the ruleset is made of.
        :param pulumi.Input[str] type: Required type of the ruleset ("ip" or "vpce")
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ECDeploymentTrafficFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ECDeploymentTrafficFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ECDeploymentTrafficFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ECDeploymentTrafficFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_by_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ECDeploymentTrafficFilterRuleArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ECDeploymentTrafficFilterArgs.__new__(ECDeploymentTrafficFilterArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["include_by_default"] = include_by_default
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ECDeploymentTrafficFilter, __self__).__init__(
            'ec:index/eCDeploymentTrafficFilter:ECDeploymentTrafficFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            include_by_default: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ECDeploymentTrafficFilterRuleArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ECDeploymentTrafficFilter':
        """
        Get an existing ECDeploymentTrafficFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Optional ruleset description
        :param pulumi.Input[bool] include_by_default: Should the ruleset be automatically included in the new deployments (Defaults to false)
        :param pulumi.Input[str] name: Required name of the ruleset
        :param pulumi.Input[str] region: Required filter region, the ruleset can only be attached to deployments in the specific region
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ECDeploymentTrafficFilterRuleArgs']]]] rules: Required list of rules, which the ruleset is made of.
        :param pulumi.Input[str] type: Required type of the ruleset ("ip" or "vpce")
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ECDeploymentTrafficFilterState.__new__(_ECDeploymentTrafficFilterState)

        __props__.__dict__["description"] = description
        __props__.__dict__["include_by_default"] = include_by_default
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["rules"] = rules
        __props__.__dict__["type"] = type
        return ECDeploymentTrafficFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional ruleset description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="includeByDefault")
    def include_by_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Should the ruleset be automatically included in the new deployments (Defaults to false)
        """
        return pulumi.get(self, "include_by_default")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Required name of the ruleset
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Required filter region, the ruleset can only be attached to deployments in the specific region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.ECDeploymentTrafficFilterRule']]:
        """
        Required list of rules, which the ruleset is made of.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Required type of the ruleset ("ip" or "vpce")
        """
        return pulumi.get(self, "type")

