# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetECDeploymentResult',
    'AwaitableGetECDeploymentResult',
    'get_ec_deployment',
]

@pulumi.output_type
class GetECDeploymentResult:
    """
    A collection of values returned by getECDeployment.
    """
    def __init__(__self__, apms=None, deployment_template_id=None, elasticsearches=None, enterprise_searches=None, healthy=None, id=None, kibanas=None, name=None, observabilities=None, region=None, tags=None, traffic_filters=None):
        if apms and not isinstance(apms, list):
            raise TypeError("Expected argument 'apms' to be a list")
        pulumi.set(__self__, "apms", apms)
        if deployment_template_id and not isinstance(deployment_template_id, str):
            raise TypeError("Expected argument 'deployment_template_id' to be a str")
        pulumi.set(__self__, "deployment_template_id", deployment_template_id)
        if elasticsearches and not isinstance(elasticsearches, list):
            raise TypeError("Expected argument 'elasticsearches' to be a list")
        pulumi.set(__self__, "elasticsearches", elasticsearches)
        if enterprise_searches and not isinstance(enterprise_searches, list):
            raise TypeError("Expected argument 'enterprise_searches' to be a list")
        pulumi.set(__self__, "enterprise_searches", enterprise_searches)
        if healthy and not isinstance(healthy, bool):
            raise TypeError("Expected argument 'healthy' to be a bool")
        pulumi.set(__self__, "healthy", healthy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kibanas and not isinstance(kibanas, list):
            raise TypeError("Expected argument 'kibanas' to be a list")
        pulumi.set(__self__, "kibanas", kibanas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if observabilities and not isinstance(observabilities, list):
            raise TypeError("Expected argument 'observabilities' to be a list")
        pulumi.set(__self__, "observabilities", observabilities)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if traffic_filters and not isinstance(traffic_filters, list):
            raise TypeError("Expected argument 'traffic_filters' to be a list")
        pulumi.set(__self__, "traffic_filters", traffic_filters)

    @property
    @pulumi.getter
    def apms(self) -> Sequence['outputs.GetECDeploymentApmResult']:
        return pulumi.get(self, "apms")

    @property
    @pulumi.getter(name="deploymentTemplateId")
    def deployment_template_id(self) -> str:
        return pulumi.get(self, "deployment_template_id")

    @property
    @pulumi.getter
    def elasticsearches(self) -> Sequence['outputs.GetECDeploymentElasticsearchResult']:
        return pulumi.get(self, "elasticsearches")

    @property
    @pulumi.getter(name="enterpriseSearches")
    def enterprise_searches(self) -> Sequence['outputs.GetECDeploymentEnterpriseSearchResult']:
        return pulumi.get(self, "enterprise_searches")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kibanas(self) -> Sequence['outputs.GetECDeploymentKibanaResult']:
        return pulumi.get(self, "kibanas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def observabilities(self) -> Sequence['outputs.GetECDeploymentObservabilityResult']:
        return pulumi.get(self, "observabilities")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trafficFilters")
    def traffic_filters(self) -> Sequence[str]:
        return pulumi.get(self, "traffic_filters")


class AwaitableGetECDeploymentResult(GetECDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetECDeploymentResult(
            apms=self.apms,
            deployment_template_id=self.deployment_template_id,
            elasticsearches=self.elasticsearches,
            enterprise_searches=self.enterprise_searches,
            healthy=self.healthy,
            id=self.id,
            kibanas=self.kibanas,
            name=self.name,
            observabilities=self.observabilities,
            region=self.region,
            tags=self.tags,
            traffic_filters=self.traffic_filters)


def get_ec_deployment(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetECDeploymentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('ec:index/getECDeployment:getECDeployment', __args__, opts=opts, typ=GetECDeploymentResult).value

    return AwaitableGetECDeploymentResult(
        apms=__ret__.apms,
        deployment_template_id=__ret__.deployment_template_id,
        elasticsearches=__ret__.elasticsearches,
        enterprise_searches=__ret__.enterprise_searches,
        healthy=__ret__.healthy,
        id=__ret__.id,
        kibanas=__ret__.kibanas,
        name=__ret__.name,
        observabilities=__ret__.observabilities,
        region=__ret__.region,
        tags=__ret__.tags,
        traffic_filters=__ret__.traffic_filters)
