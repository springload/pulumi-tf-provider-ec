# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ECDeploymentApmArgs',
    'ECDeploymentApmConfigArgs',
    'ECDeploymentApmTopologyArgs',
    'ECDeploymentElasticsearchArgs',
    'ECDeploymentElasticsearchConfigArgs',
    'ECDeploymentElasticsearchExtensionArgs',
    'ECDeploymentElasticsearchRemoteClusterArgs',
    'ECDeploymentElasticsearchSnapshotSourceArgs',
    'ECDeploymentElasticsearchTopologyArgs',
    'ECDeploymentEnterpriseSearchArgs',
    'ECDeploymentEnterpriseSearchConfigArgs',
    'ECDeploymentEnterpriseSearchTopologyArgs',
    'ECDeploymentKibanaArgs',
    'ECDeploymentKibanaConfigArgs',
    'ECDeploymentKibanaTopologyArgs',
    'ECDeploymentObservabilityArgs',
    'ECDeploymentTrafficFilterRuleArgs',
    'GetECDeploymentsApmArgs',
    'GetECDeploymentsElasticsearchArgs',
    'GetECDeploymentsEnterpriseSearchArgs',
    'GetECDeploymentsKibanaArgs',
]

@pulumi.input_type
class ECDeploymentApmArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ECDeploymentApmConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentApmTopologyArgs']]]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ECDeploymentApmConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ECDeploymentApmConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentApmTopologyArgs']]]]:
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentApmTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class ECDeploymentApmConfigArgs:
    def __init__(__self__, *,
                 debug_enabled: Optional[pulumi.Input[bool]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug_enabled")

    @debug_enabled.setter
    def debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_enabled", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class ECDeploymentApmTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class ECDeploymentElasticsearchArgs:
    def __init__(__self__, *,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['ECDeploymentElasticsearchConfigArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchExtensionArgs']]]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 remote_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchRemoteClusterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 snapshot_source: Optional[pulumi.Input['ECDeploymentElasticsearchSnapshotSourceArgs']] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchTopologyArgs']]]] = None):
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if snapshot_source is not None:
            pulumi.set(__self__, "snapshot_source", snapshot_source)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ECDeploymentElasticsearchConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ECDeploymentElasticsearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchExtensionArgs']]]]:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchRemoteClusterArgs']]]]:
        return pulumi.get(self, "remote_clusters")

    @remote_clusters.setter
    def remote_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchRemoteClusterArgs']]]]):
        pulumi.set(self, "remote_clusters", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="snapshotSource")
    def snapshot_source(self) -> Optional[pulumi.Input['ECDeploymentElasticsearchSnapshotSourceArgs']]:
        return pulumi.get(self, "snapshot_source")

    @snapshot_source.setter
    def snapshot_source(self, value: Optional[pulumi.Input['ECDeploymentElasticsearchSnapshotSourceArgs']]):
        pulumi.set(self, "snapshot_source", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchTopologyArgs']]]]:
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentElasticsearchTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class ECDeploymentElasticsearchConfigArgs:
    def __init__(__self__, *,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class ECDeploymentElasticsearchExtensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ECDeploymentElasticsearchRemoteClusterArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 skip_unavailable: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "deployment_id", deployment_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if skip_unavailable is not None:
            pulumi.set(__self__, "skip_unavailable", skip_unavailable)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter(name="skipUnavailable")
    def skip_unavailable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_unavailable")

    @skip_unavailable.setter
    def skip_unavailable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_unavailable", value)


@pulumi.input_type
class ECDeploymentElasticsearchSnapshotSourceArgs:
    def __init__(__self__, *,
                 source_elasticsearch_cluster_id: pulumi.Input[str],
                 snapshot_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_elasticsearch_cluster_id", source_elasticsearch_cluster_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="sourceElasticsearchClusterId")
    def source_elasticsearch_cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_elasticsearch_cluster_id")

    @source_elasticsearch_cluster_id.setter
    def source_elasticsearch_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_elasticsearch_cluster_id", value)

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_name")

    @snapshot_name.setter
    def snapshot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_name", value)


@pulumi.input_type
class ECDeploymentElasticsearchTopologyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class ECDeploymentEnterpriseSearchArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ECDeploymentEnterpriseSearchConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentEnterpriseSearchTopologyArgs']]]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ECDeploymentEnterpriseSearchConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ECDeploymentEnterpriseSearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentEnterpriseSearchTopologyArgs']]]]:
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentEnterpriseSearchTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class ECDeploymentEnterpriseSearchConfigArgs:
    def __init__(__self__, *,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class ECDeploymentEnterpriseSearchTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 node_type_appserver: Optional[pulumi.Input[bool]] = None,
                 node_type_connector: Optional[pulumi.Input[bool]] = None,
                 node_type_worker: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_type_appserver is not None:
            pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        if node_type_connector is not None:
            pulumi.set(__self__, "node_type_connector", node_type_connector)
        if node_type_worker is not None:
            pulumi.set(__self__, "node_type_worker", node_type_worker)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_appserver")

    @node_type_appserver.setter
    def node_type_appserver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_appserver", value)

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_connector")

    @node_type_connector.setter
    def node_type_connector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_connector", value)

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_worker")

    @node_type_worker.setter
    def node_type_worker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_worker", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class ECDeploymentKibanaArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ECDeploymentKibanaConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentKibanaTopologyArgs']]]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ECDeploymentKibanaConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ECDeploymentKibanaConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentKibanaTopologyArgs']]]]:
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ECDeploymentKibanaTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class ECDeploymentKibanaConfigArgs:
    def __init__(__self__, *,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class ECDeploymentKibanaTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class ECDeploymentObservabilityArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 logs: Optional[pulumi.Input[bool]] = None,
                 metrics: Optional[pulumi.Input[bool]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "deployment_id", deployment_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)


@pulumi.input_type
class ECDeploymentTrafficFilterRuleArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source", source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GetECDeploymentsApmArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetECDeploymentsElasticsearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetECDeploymentsEnterpriseSearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetECDeploymentsKibanaArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


