# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ECDeploymentArgs', 'ECDeployment']

@pulumi.input_type
class ECDeploymentArgs:
    def __init__(__self__, *,
                 deployment_template_id: pulumi.Input[str],
                 elasticsearch: pulumi.Input['ECDeploymentElasticsearchArgs'],
                 region: pulumi.Input[str],
                 version: pulumi.Input[str],
                 apm: Optional[pulumi.Input['ECDeploymentApmArgs']] = None,
                 enterprise_search: Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']] = None,
                 kibana: Optional[pulumi.Input['ECDeploymentKibanaArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 observability: Optional[pulumi.Input['ECDeploymentObservabilityArgs']] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 traffic_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ECDeployment resource.
        :param pulumi.Input[str] deployment_template_id: Required Deployment Template identifier to create the deployment from
        :param pulumi.Input['ECDeploymentElasticsearchArgs'] elasticsearch: Required Elasticsearch resource definition
        :param pulumi.Input[str] region: Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        :param pulumi.Input[str] version: Required Elastic Stack version to use for all of the deployment resources
        :param pulumi.Input['ECDeploymentApmArgs'] apm: Optional APM resource definition
        :param pulumi.Input['ECDeploymentEnterpriseSearchArgs'] enterprise_search: Optional Enterprise Search resource definition
        :param pulumi.Input['ECDeploymentKibanaArgs'] kibana: Optional Kibana resource definition
        :param pulumi.Input[str] name: Optional name for the deployment
        :param pulumi.Input['ECDeploymentObservabilityArgs'] observability: Optional observability settings. Ship logs and metrics to a dedicated deployment.
        :param pulumi.Input[str] request_id: Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
               request_id is returned as part of the error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional map of deployment tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_filters: Optional list of traffic filters to apply to this deployment.
        """
        pulumi.set(__self__, "deployment_template_id", deployment_template_id)
        pulumi.set(__self__, "elasticsearch", elasticsearch)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "version", version)
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if enterprise_search is not None:
            pulumi.set(__self__, "enterprise_search", enterprise_search)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if traffic_filters is not None:
            pulumi.set(__self__, "traffic_filters", traffic_filters)

    @property
    @pulumi.getter(name="deploymentTemplateId")
    def deployment_template_id(self) -> pulumi.Input[str]:
        """
        Required Deployment Template identifier to create the deployment from
        """
        return pulumi.get(self, "deployment_template_id")

    @deployment_template_id.setter
    def deployment_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_template_id", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> pulumi.Input['ECDeploymentElasticsearchArgs']:
        """
        Required Elasticsearch resource definition
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: pulumi.Input['ECDeploymentElasticsearchArgs']):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Required Elastic Stack version to use for all of the deployment resources
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input['ECDeploymentApmArgs']]:
        """
        Optional APM resource definition
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input['ECDeploymentApmArgs']]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter(name="enterpriseSearch")
    def enterprise_search(self) -> Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']]:
        """
        Optional Enterprise Search resource definition
        """
        return pulumi.get(self, "enterprise_search")

    @enterprise_search.setter
    def enterprise_search(self, value: Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']]):
        pulumi.set(self, "enterprise_search", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ECDeploymentKibanaArgs']]:
        """
        Optional Kibana resource definition
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ECDeploymentKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional name for the deployment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def observability(self) -> Optional[pulumi.Input['ECDeploymentObservabilityArgs']]:
        """
        Optional observability settings. Ship logs and metrics to a dedicated deployment.
        """
        return pulumi.get(self, "observability")

    @observability.setter
    def observability(self, value: Optional[pulumi.Input['ECDeploymentObservabilityArgs']]):
        pulumi.set(self, "observability", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
        request_id is returned as part of the error
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional map of deployment tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trafficFilters")
    def traffic_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional list of traffic filters to apply to this deployment.
        """
        return pulumi.get(self, "traffic_filters")

    @traffic_filters.setter
    def traffic_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_filters", value)


@pulumi.input_type
class _ECDeploymentState:
    def __init__(__self__, *,
                 apm: Optional[pulumi.Input['ECDeploymentApmArgs']] = None,
                 apm_secret_token: Optional[pulumi.Input[str]] = None,
                 deployment_template_id: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input['ECDeploymentElasticsearchArgs']] = None,
                 elasticsearch_password: Optional[pulumi.Input[str]] = None,
                 elasticsearch_username: Optional[pulumi.Input[str]] = None,
                 enterprise_search: Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']] = None,
                 kibana: Optional[pulumi.Input['ECDeploymentKibanaArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 observability: Optional[pulumi.Input['ECDeploymentObservabilityArgs']] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 traffic_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ECDeployment resources.
        :param pulumi.Input['ECDeploymentApmArgs'] apm: Optional APM resource definition
        :param pulumi.Input[str] deployment_template_id: Required Deployment Template identifier to create the deployment from
        :param pulumi.Input['ECDeploymentElasticsearchArgs'] elasticsearch: Required Elasticsearch resource definition
        :param pulumi.Input[str] elasticsearch_password: Computed password obtained upon creating the Elasticsearch resource
        :param pulumi.Input[str] elasticsearch_username: Computed username obtained upon creating the Elasticsearch resource
        :param pulumi.Input['ECDeploymentEnterpriseSearchArgs'] enterprise_search: Optional Enterprise Search resource definition
        :param pulumi.Input['ECDeploymentKibanaArgs'] kibana: Optional Kibana resource definition
        :param pulumi.Input[str] name: Optional name for the deployment
        :param pulumi.Input['ECDeploymentObservabilityArgs'] observability: Optional observability settings. Ship logs and metrics to a dedicated deployment.
        :param pulumi.Input[str] region: Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        :param pulumi.Input[str] request_id: Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
               request_id is returned as part of the error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional map of deployment tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_filters: Optional list of traffic filters to apply to this deployment.
        :param pulumi.Input[str] version: Required Elastic Stack version to use for all of the deployment resources
        """
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if apm_secret_token is not None:
            pulumi.set(__self__, "apm_secret_token", apm_secret_token)
        if deployment_template_id is not None:
            pulumi.set(__self__, "deployment_template_id", deployment_template_id)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if elasticsearch_password is not None:
            pulumi.set(__self__, "elasticsearch_password", elasticsearch_password)
        if elasticsearch_username is not None:
            pulumi.set(__self__, "elasticsearch_username", elasticsearch_username)
        if enterprise_search is not None:
            pulumi.set(__self__, "enterprise_search", enterprise_search)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if observability is not None:
            pulumi.set(__self__, "observability", observability)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if traffic_filters is not None:
            pulumi.set(__self__, "traffic_filters", traffic_filters)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input['ECDeploymentApmArgs']]:
        """
        Optional APM resource definition
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input['ECDeploymentApmArgs']]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter(name="apmSecretToken")
    def apm_secret_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apm_secret_token")

    @apm_secret_token.setter
    def apm_secret_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apm_secret_token", value)

    @property
    @pulumi.getter(name="deploymentTemplateId")
    def deployment_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required Deployment Template identifier to create the deployment from
        """
        return pulumi.get(self, "deployment_template_id")

    @deployment_template_id.setter
    def deployment_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_template_id", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input['ECDeploymentElasticsearchArgs']]:
        """
        Required Elasticsearch resource definition
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input['ECDeploymentElasticsearchArgs']]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter(name="elasticsearchPassword")
    def elasticsearch_password(self) -> Optional[pulumi.Input[str]]:
        """
        Computed password obtained upon creating the Elasticsearch resource
        """
        return pulumi.get(self, "elasticsearch_password")

    @elasticsearch_password.setter
    def elasticsearch_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_password", value)

    @property
    @pulumi.getter(name="elasticsearchUsername")
    def elasticsearch_username(self) -> Optional[pulumi.Input[str]]:
        """
        Computed username obtained upon creating the Elasticsearch resource
        """
        return pulumi.get(self, "elasticsearch_username")

    @elasticsearch_username.setter
    def elasticsearch_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_username", value)

    @property
    @pulumi.getter(name="enterpriseSearch")
    def enterprise_search(self) -> Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']]:
        """
        Optional Enterprise Search resource definition
        """
        return pulumi.get(self, "enterprise_search")

    @enterprise_search.setter
    def enterprise_search(self, value: Optional[pulumi.Input['ECDeploymentEnterpriseSearchArgs']]):
        pulumi.set(self, "enterprise_search", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input['ECDeploymentKibanaArgs']]:
        """
        Optional Kibana resource definition
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input['ECDeploymentKibanaArgs']]):
        pulumi.set(self, "kibana", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional name for the deployment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def observability(self) -> Optional[pulumi.Input['ECDeploymentObservabilityArgs']]:
        """
        Optional observability settings. Ship logs and metrics to a dedicated deployment.
        """
        return pulumi.get(self, "observability")

    @observability.setter
    def observability(self, value: Optional[pulumi.Input['ECDeploymentObservabilityArgs']]):
        pulumi.set(self, "observability", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
        request_id is returned as part of the error
        """
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional map of deployment tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trafficFilters")
    def traffic_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional list of traffic filters to apply to this deployment.
        """
        return pulumi.get(self, "traffic_filters")

    @traffic_filters.setter
    def traffic_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "traffic_filters", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Required Elastic Stack version to use for all of the deployment resources
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class ECDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apm: Optional[pulumi.Input[pulumi.InputType['ECDeploymentApmArgs']]] = None,
                 deployment_template_id: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input[pulumi.InputType['ECDeploymentElasticsearchArgs']]] = None,
                 enterprise_search: Optional[pulumi.Input[pulumi.InputType['ECDeploymentEnterpriseSearchArgs']]] = None,
                 kibana: Optional[pulumi.Input[pulumi.InputType['ECDeploymentKibanaArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 observability: Optional[pulumi.Input[pulumi.InputType['ECDeploymentObservabilityArgs']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 traffic_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ECDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ECDeploymentApmArgs']] apm: Optional APM resource definition
        :param pulumi.Input[str] deployment_template_id: Required Deployment Template identifier to create the deployment from
        :param pulumi.Input[pulumi.InputType['ECDeploymentElasticsearchArgs']] elasticsearch: Required Elasticsearch resource definition
        :param pulumi.Input[pulumi.InputType['ECDeploymentEnterpriseSearchArgs']] enterprise_search: Optional Enterprise Search resource definition
        :param pulumi.Input[pulumi.InputType['ECDeploymentKibanaArgs']] kibana: Optional Kibana resource definition
        :param pulumi.Input[str] name: Optional name for the deployment
        :param pulumi.Input[pulumi.InputType['ECDeploymentObservabilityArgs']] observability: Optional observability settings. Ship logs and metrics to a dedicated deployment.
        :param pulumi.Input[str] region: Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        :param pulumi.Input[str] request_id: Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
               request_id is returned as part of the error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional map of deployment tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_filters: Optional list of traffic filters to apply to this deployment.
        :param pulumi.Input[str] version: Required Elastic Stack version to use for all of the deployment resources
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ECDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ECDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ECDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ECDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apm: Optional[pulumi.Input[pulumi.InputType['ECDeploymentApmArgs']]] = None,
                 deployment_template_id: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input[pulumi.InputType['ECDeploymentElasticsearchArgs']]] = None,
                 enterprise_search: Optional[pulumi.Input[pulumi.InputType['ECDeploymentEnterpriseSearchArgs']]] = None,
                 kibana: Optional[pulumi.Input[pulumi.InputType['ECDeploymentKibanaArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 observability: Optional[pulumi.Input[pulumi.InputType['ECDeploymentObservabilityArgs']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 traffic_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ECDeploymentArgs.__new__(ECDeploymentArgs)

            __props__.__dict__["apm"] = apm
            if deployment_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'deployment_template_id'")
            __props__.__dict__["deployment_template_id"] = deployment_template_id
            if elasticsearch is None and not opts.urn:
                raise TypeError("Missing required property 'elasticsearch'")
            __props__.__dict__["elasticsearch"] = elasticsearch
            __props__.__dict__["enterprise_search"] = enterprise_search
            __props__.__dict__["kibana"] = kibana
            __props__.__dict__["name"] = name
            __props__.__dict__["observability"] = observability
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["request_id"] = request_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["traffic_filters"] = traffic_filters
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["apm_secret_token"] = None
            __props__.__dict__["elasticsearch_password"] = None
            __props__.__dict__["elasticsearch_username"] = None
        super(ECDeployment, __self__).__init__(
            'ec:index/eCDeployment:ECDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apm: Optional[pulumi.Input[pulumi.InputType['ECDeploymentApmArgs']]] = None,
            apm_secret_token: Optional[pulumi.Input[str]] = None,
            deployment_template_id: Optional[pulumi.Input[str]] = None,
            elasticsearch: Optional[pulumi.Input[pulumi.InputType['ECDeploymentElasticsearchArgs']]] = None,
            elasticsearch_password: Optional[pulumi.Input[str]] = None,
            elasticsearch_username: Optional[pulumi.Input[str]] = None,
            enterprise_search: Optional[pulumi.Input[pulumi.InputType['ECDeploymentEnterpriseSearchArgs']]] = None,
            kibana: Optional[pulumi.Input[pulumi.InputType['ECDeploymentKibanaArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            observability: Optional[pulumi.Input[pulumi.InputType['ECDeploymentObservabilityArgs']]] = None,
            region: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            traffic_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'ECDeployment':
        """
        Get an existing ECDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ECDeploymentApmArgs']] apm: Optional APM resource definition
        :param pulumi.Input[str] deployment_template_id: Required Deployment Template identifier to create the deployment from
        :param pulumi.Input[pulumi.InputType['ECDeploymentElasticsearchArgs']] elasticsearch: Required Elasticsearch resource definition
        :param pulumi.Input[str] elasticsearch_password: Computed password obtained upon creating the Elasticsearch resource
        :param pulumi.Input[str] elasticsearch_username: Computed username obtained upon creating the Elasticsearch resource
        :param pulumi.Input[pulumi.InputType['ECDeploymentEnterpriseSearchArgs']] enterprise_search: Optional Enterprise Search resource definition
        :param pulumi.Input[pulumi.InputType['ECDeploymentKibanaArgs']] kibana: Optional Kibana resource definition
        :param pulumi.Input[str] name: Optional name for the deployment
        :param pulumi.Input[pulumi.InputType['ECDeploymentObservabilityArgs']] observability: Optional observability settings. Ship logs and metrics to a dedicated deployment.
        :param pulumi.Input[str] region: Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        :param pulumi.Input[str] request_id: Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
               request_id is returned as part of the error
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Optional map of deployment tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] traffic_filters: Optional list of traffic filters to apply to this deployment.
        :param pulumi.Input[str] version: Required Elastic Stack version to use for all of the deployment resources
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ECDeploymentState.__new__(_ECDeploymentState)

        __props__.__dict__["apm"] = apm
        __props__.__dict__["apm_secret_token"] = apm_secret_token
        __props__.__dict__["deployment_template_id"] = deployment_template_id
        __props__.__dict__["elasticsearch"] = elasticsearch
        __props__.__dict__["elasticsearch_password"] = elasticsearch_password
        __props__.__dict__["elasticsearch_username"] = elasticsearch_username
        __props__.__dict__["enterprise_search"] = enterprise_search
        __props__.__dict__["kibana"] = kibana
        __props__.__dict__["name"] = name
        __props__.__dict__["observability"] = observability
        __props__.__dict__["region"] = region
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["traffic_filters"] = traffic_filters
        __props__.__dict__["version"] = version
        return ECDeployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def apm(self) -> pulumi.Output[Optional['outputs.ECDeploymentApm']]:
        """
        Optional APM resource definition
        """
        return pulumi.get(self, "apm")

    @property
    @pulumi.getter(name="apmSecretToken")
    def apm_secret_token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "apm_secret_token")

    @property
    @pulumi.getter(name="deploymentTemplateId")
    def deployment_template_id(self) -> pulumi.Output[str]:
        """
        Required Deployment Template identifier to create the deployment from
        """
        return pulumi.get(self, "deployment_template_id")

    @property
    @pulumi.getter
    def elasticsearch(self) -> pulumi.Output['outputs.ECDeploymentElasticsearch']:
        """
        Required Elasticsearch resource definition
        """
        return pulumi.get(self, "elasticsearch")

    @property
    @pulumi.getter(name="elasticsearchPassword")
    def elasticsearch_password(self) -> pulumi.Output[str]:
        """
        Computed password obtained upon creating the Elasticsearch resource
        """
        return pulumi.get(self, "elasticsearch_password")

    @property
    @pulumi.getter(name="elasticsearchUsername")
    def elasticsearch_username(self) -> pulumi.Output[str]:
        """
        Computed username obtained upon creating the Elasticsearch resource
        """
        return pulumi.get(self, "elasticsearch_username")

    @property
    @pulumi.getter(name="enterpriseSearch")
    def enterprise_search(self) -> pulumi.Output[Optional['outputs.ECDeploymentEnterpriseSearch']]:
        """
        Optional Enterprise Search resource definition
        """
        return pulumi.get(self, "enterprise_search")

    @property
    @pulumi.getter
    def kibana(self) -> pulumi.Output[Optional['outputs.ECDeploymentKibana']]:
        """
        Optional Kibana resource definition
        """
        return pulumi.get(self, "kibana")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Optional name for the deployment
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def observability(self) -> pulumi.Output[Optional['outputs.ECDeploymentObservability']]:
        """
        Optional observability settings. Ship logs and metrics to a dedicated deployment.
        """
        return pulumi.get(self, "observability")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[Optional[str]]:
        """
        Optional request_id to set on the create operation, only use when previous create attempts return with an error and a
        request_id is returned as part of the error
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Optional map of deployment tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trafficFilters")
    def traffic_filters(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Optional list of traffic filters to apply to this deployment.
        """
        return pulumi.get(self, "traffic_filters")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Required Elastic Stack version to use for all of the deployment resources
        """
        return pulumi.get(self, "version")

