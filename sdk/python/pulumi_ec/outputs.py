# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ECDeploymentApm',
    'ECDeploymentApmConfig',
    'ECDeploymentApmTopology',
    'ECDeploymentElasticsearch',
    'ECDeploymentElasticsearchConfig',
    'ECDeploymentElasticsearchExtension',
    'ECDeploymentElasticsearchRemoteCluster',
    'ECDeploymentElasticsearchSnapshotSource',
    'ECDeploymentElasticsearchTopology',
    'ECDeploymentEnterpriseSearch',
    'ECDeploymentEnterpriseSearchConfig',
    'ECDeploymentEnterpriseSearchTopology',
    'ECDeploymentKibana',
    'ECDeploymentKibanaConfig',
    'ECDeploymentKibanaTopology',
    'ECDeploymentObservability',
    'ECDeploymentTrafficFilterRule',
    'GetECDeploymentApmResult',
    'GetECDeploymentApmTopologyResult',
    'GetECDeploymentElasticsearchResult',
    'GetECDeploymentElasticsearchTopologyResult',
    'GetECDeploymentEnterpriseSearchResult',
    'GetECDeploymentEnterpriseSearchTopologyResult',
    'GetECDeploymentKibanaResult',
    'GetECDeploymentKibanaTopologyResult',
    'GetECDeploymentObservabilityResult',
    'GetECDeploymentsApmResult',
    'GetECDeploymentsDeploymentResult',
    'GetECDeploymentsElasticsearchResult',
    'GetECDeploymentsEnterpriseSearchResult',
    'GetECDeploymentsKibanaResult',
    'GetECStackApmResult',
    'GetECStackElasticsearchResult',
    'GetECStackEnterpriseSearchResult',
    'GetECStackKibanaResult',
]

@pulumi.output_type
class ECDeploymentApm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentApm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentApm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentApm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.ECDeploymentApmConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.ECDeploymentApmTopology']] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ECDeploymentApmConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.ECDeploymentApmTopology']]:
        return pulumi.get(self, "topologies")


@pulumi.output_type
class ECDeploymentApmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "debugEnabled":
            suggest = "debug_enabled"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentApmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentApmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentApmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 debug_enabled: Optional[bool] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "debug_enabled")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class ECDeploymentApmTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentApmTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentApmTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentApmTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class ECDeploymentElasticsearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudId":
            suggest = "cloud_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "remoteClusters":
            suggest = "remote_clusters"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "snapshotSource":
            suggest = "snapshot_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentElasticsearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentElasticsearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentElasticsearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_id: Optional[str] = None,
                 config: Optional['outputs.ECDeploymentElasticsearchConfig'] = None,
                 extensions: Optional[Sequence['outputs.ECDeploymentElasticsearchExtension']] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 remote_clusters: Optional[Sequence['outputs.ECDeploymentElasticsearchRemoteCluster']] = None,
                 resource_id: Optional[str] = None,
                 snapshot_source: Optional['outputs.ECDeploymentElasticsearchSnapshotSource'] = None,
                 topologies: Optional[Sequence['outputs.ECDeploymentElasticsearchTopology']] = None):
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if snapshot_source is not None:
            pulumi.set(__self__, "snapshot_source", snapshot_source)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ECDeploymentElasticsearchConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.ECDeploymentElasticsearchExtension']]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[Sequence['outputs.ECDeploymentElasticsearchRemoteCluster']]:
        return pulumi.get(self, "remote_clusters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="snapshotSource")
    def snapshot_source(self) -> Optional['outputs.ECDeploymentElasticsearchSnapshotSource']:
        return pulumi.get(self, "snapshot_source")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.ECDeploymentElasticsearchTopology']]:
        return pulumi.get(self, "topologies")


@pulumi.output_type
class ECDeploymentElasticsearchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentElasticsearchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentElasticsearchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentElasticsearchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plugins: Optional[Sequence[str]] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class ECDeploymentElasticsearchExtension(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 url: str,
                 version: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class ECDeploymentElasticsearchRemoteCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "skipUnavailable":
            suggest = "skip_unavailable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentElasticsearchRemoteCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentElasticsearchRemoteCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentElasticsearchRemoteCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 alias: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 skip_unavailable: Optional[bool] = None):
        pulumi.set(__self__, "deployment_id", deployment_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if skip_unavailable is not None:
            pulumi.set(__self__, "skip_unavailable", skip_unavailable)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="skipUnavailable")
    def skip_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "skip_unavailable")


@pulumi.output_type
class ECDeploymentElasticsearchSnapshotSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceElasticsearchClusterId":
            suggest = "source_elasticsearch_cluster_id"
        elif key == "snapshotName":
            suggest = "snapshot_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentElasticsearchSnapshotSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentElasticsearchSnapshotSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentElasticsearchSnapshotSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_elasticsearch_cluster_id: str,
                 snapshot_name: Optional[str] = None):
        pulumi.set(__self__, "source_elasticsearch_cluster_id", source_elasticsearch_cluster_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="sourceElasticsearchClusterId")
    def source_elasticsearch_cluster_id(self) -> str:
        return pulumi.get(self, "source_elasticsearch_cluster_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_name")


@pulumi.output_type
class ECDeploymentElasticsearchTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "nodeRoles":
            suggest = "node_roles"
        elif key == "nodeTypeData":
            suggest = "node_type_data"
        elif key == "nodeTypeIngest":
            suggest = "node_type_ingest"
        elif key == "nodeTypeMaster":
            suggest = "node_type_master"
        elif key == "nodeTypeMl":
            suggest = "node_type_ml"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentElasticsearchTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentElasticsearchTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentElasticsearchTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 instance_configuration_id: Optional[str] = None,
                 node_roles: Optional[Sequence[str]] = None,
                 node_type_data: Optional[str] = None,
                 node_type_ingest: Optional[str] = None,
                 node_type_master: Optional[str] = None,
                 node_type_ml: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "node_roles")

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[str]:
        return pulumi.get(self, "node_type_data")

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[str]:
        return pulumi.get(self, "node_type_ingest")

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[str]:
        return pulumi.get(self, "node_type_master")

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[str]:
        return pulumi.get(self, "node_type_ml")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class ECDeploymentEnterpriseSearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentEnterpriseSearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentEnterpriseSearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentEnterpriseSearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.ECDeploymentEnterpriseSearchConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.ECDeploymentEnterpriseSearchTopology']] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ECDeploymentEnterpriseSearchConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.ECDeploymentEnterpriseSearchTopology']]:
        return pulumi.get(self, "topologies")


@pulumi.output_type
class ECDeploymentEnterpriseSearchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentEnterpriseSearchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentEnterpriseSearchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentEnterpriseSearchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class ECDeploymentEnterpriseSearchTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "nodeTypeAppserver":
            suggest = "node_type_appserver"
        elif key == "nodeTypeConnector":
            suggest = "node_type_connector"
        elif key == "nodeTypeWorker":
            suggest = "node_type_worker"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentEnterpriseSearchTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentEnterpriseSearchTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentEnterpriseSearchTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 node_type_appserver: Optional[bool] = None,
                 node_type_connector: Optional[bool] = None,
                 node_type_worker: Optional[bool] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_type_appserver is not None:
            pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        if node_type_connector is not None:
            pulumi.set(__self__, "node_type_connector", node_type_connector)
        if node_type_worker is not None:
            pulumi.set(__self__, "node_type_worker", node_type_worker)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_appserver")

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_connector")

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_worker")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class ECDeploymentKibana(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentKibana. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentKibana.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentKibana.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.ECDeploymentKibanaConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.ECDeploymentKibanaTopology']] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ECDeploymentKibanaConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.ECDeploymentKibanaTopology']]:
        return pulumi.get(self, "topologies")


@pulumi.output_type
class ECDeploymentKibanaConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentKibanaConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentKibanaConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentKibanaConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class ECDeploymentKibanaTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentKibanaTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentKibanaTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentKibanaTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class ECDeploymentObservability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ECDeploymentObservability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ECDeploymentObservability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ECDeploymentObservability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 logs: Optional[bool] = None,
                 metrics: Optional[bool] = None,
                 ref_id: Optional[str] = None):
        pulumi.set(__self__, "deployment_id", deployment_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def logs(self) -> Optional[bool]:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[bool]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        return pulumi.get(self, "ref_id")


@pulumi.output_type
class ECDeploymentTrafficFilterRule(dict):
    def __init__(__self__, *,
                 source: str,
                 description: Optional[str] = None,
                 id: Optional[str] = None):
        pulumi.set(__self__, "source", source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetECDeploymentApmResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetECDeploymentApmTopologyResult'],
                 version: str):
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetECDeploymentApmTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentApmTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetECDeploymentElasticsearchResult(dict):
    def __init__(__self__, *,
                 cloud_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetECDeploymentElasticsearchTopologyResult'],
                 version: str):
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetECDeploymentElasticsearchTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentElasticsearchTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 node_roles: Sequence[str],
                 node_type_data: bool,
                 node_type_ingest: bool,
                 node_type_master: bool,
                 size: str,
                 size_resource: str,
                 zone_count: int,
                 node_type_ml: Optional[bool] = None):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "node_roles", node_roles)
        pulumi.set(__self__, "node_type_data", node_type_data)
        pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        pulumi.set(__self__, "node_type_master", node_type_master)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Sequence[str]:
        return pulumi.get(self, "node_roles")

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> bool:
        return pulumi.get(self, "node_type_data")

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> bool:
        return pulumi.get(self, "node_type_ingest")

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> bool:
        return pulumi.get(self, "node_type_master")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_ml")


@pulumi.output_type
class GetECDeploymentEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetECDeploymentEnterpriseSearchTopologyResult'],
                 version: str):
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetECDeploymentEnterpriseSearchTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentEnterpriseSearchTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 node_type_appserver: bool,
                 node_type_connector: bool,
                 node_type_worker: bool,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        pulumi.set(__self__, "node_type_connector", node_type_connector)
        pulumi.set(__self__, "node_type_worker", node_type_worker)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> bool:
        return pulumi.get(self, "node_type_appserver")

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> bool:
        return pulumi.get(self, "node_type_connector")

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> bool:
        return pulumi.get(self, "node_type_worker")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetECDeploymentKibanaResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetECDeploymentKibanaTopologyResult'],
                 version: str):
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetECDeploymentKibanaTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentKibanaTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetECDeploymentObservabilityResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 logs: bool,
                 metrics: bool,
                 ref_id: str):
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def logs(self) -> bool:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> bool:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")


@pulumi.output_type
class GetECDeploymentsApmResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentsDeploymentResult(dict):
    def __init__(__self__, *,
                 apm_resource_id: str,
                 deployment_id: str,
                 elasticsearch_resource_id: str,
                 enterprise_search_resource_id: str,
                 kibana_resource_id: str):
        pulumi.set(__self__, "apm_resource_id", apm_resource_id)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "elasticsearch_resource_id", elasticsearch_resource_id)
        pulumi.set(__self__, "enterprise_search_resource_id", enterprise_search_resource_id)
        pulumi.set(__self__, "kibana_resource_id", kibana_resource_id)

    @property
    @pulumi.getter(name="apmResourceId")
    def apm_resource_id(self) -> str:
        return pulumi.get(self, "apm_resource_id")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="elasticsearchResourceId")
    def elasticsearch_resource_id(self) -> str:
        return pulumi.get(self, "elasticsearch_resource_id")

    @property
    @pulumi.getter(name="enterpriseSearchResourceId")
    def enterprise_search_resource_id(self) -> str:
        return pulumi.get(self, "enterprise_search_resource_id")

    @property
    @pulumi.getter(name="kibanaResourceId")
    def kibana_resource_id(self) -> str:
        return pulumi.get(self, "kibana_resource_id")


@pulumi.output_type
class GetECDeploymentsElasticsearchResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentsEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECDeploymentsKibanaResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetECStackApmResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetECStackElasticsearchResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetECStackEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetECStackKibanaResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


